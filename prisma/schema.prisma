// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  UserId        Int          @id @default(autoincrement()) @db.Integer
  Name          String
  Email         String       @unique
  EmailVerified DateTime?
  Image         String?
  CreationDate  DateTime     @default(now())
  UpdateDate    DateTime?    @updatedAt
  Bookings      Booking[]
  Avaliation    Avaliation[]
  Accounts      Account[]
  Sessions      Session[]
}

model BusinessUnit {
  BusinessUnitId Int          @id @default(autoincrement()) @db.Integer
  Name           String
  Email          String?      @unique
  Adress         String?
  Phone          String?
  ImageUrl       String?
  AvgRating      Decimal?     @db.Decimal(10, 2)
  CreationDate   DateTime     @default(now())
  UpdateDate     DateTime?    @updatedAt
  Bookings       Booking[]
  Service        Service[]
  Coupon         Coupon[]
  Avaliation     Avaliation[]
}

model Service {
  ServiceId      Int          @id @default(autoincrement()) @db.Integer
  Name           String
  BusinessUnitId Int
  BusinessUnit   BusinessUnit @relation(fields: [BusinessUnitId], references: [BusinessUnitId])
  Coupons        Coupon[]
  Categories     Category[]
  Bookings       Booking[]
  ImageUrl       String?
  Description    String?
  InitialValue   Decimal?     @db.Decimal(10, 2)
  CreationDate   DateTime     @default(now())
  UpdateDate     DateTime?    @updatedAt
}

model Category {
  CategoryId   Int       @id @default(autoincrement()) @db.Integer
  Name         String
  CreationDate DateTime  @default(now())
  UpdateDate   DateTime? @updatedAt
  Service      Service   @relation(fields: [ServiceId], references: [ServiceId])
  ServiceId    Int
}

model Booking {
  BookingId             Int          @id @default(autoincrement()) @db.Integer
  UserId                Int
  User                  User         @relation(fields: [UserId], references: [UserId])
  BusinessUnitId        Int
  BusinessUnit          BusinessUnit @relation(fields: [BusinessUnitId], references: [BusinessUnitId])
  ServiceId             Int
  Service               Service      @relation(fields: [ServiceId], references: [ServiceId])
  InitialValue          Decimal      @db.Decimal(10, 2)
  PrincipalValue        Decimal      @db.Decimal(10, 2)
  WasConsolidatedCoupon Boolean
  CouponId              Int?
  Coupon                Coupon?      @relation(fields: [CouponId], references: [CouponId])
  CreationDate          DateTime     @default(now())
  UpdateDate            DateTime?    @updatedAt
}

model Coupon {
  CouponId       Int          @id @default(autoincrement()) @db.Integer
  Name           String
  BusinessUnitId Int
  BusinessUnit   BusinessUnit @relation(fields: [BusinessUnitId], references: [BusinessUnitId])
  ServiceId      Int
  Service        Service      @relation(fields: [ServiceId], references: [ServiceId])
  CreationDate   DateTime     @default(now())
  UpdateDate     DateTime?    @updatedAt
  Booking        Booking[]
}

model Avaliation {
  AvaliationId   Int          @id @default(autoincrement()) @db.Integer
  UserId         Int
  User           User         @relation(fields: [UserId], references: [UserId])
  BusinessUnitId Int
  BusinessUnit   BusinessUnit @relation(fields: [BusinessUnitId], references: [BusinessUnitId])
  Message        String
  Rating         Decimal      @db.Decimal(10, 2)
  CreationDate   DateTime     @default(now())
  UpdateDate     DateTime?    @updatedAt
}

model Account {
  AccountId         String  @id @default(cuid())
  UserId            Int
  Type              String
  Provider          String
  ProviderAccountId String
  RefreshToken      String? @db.Text
  AccessToken       String? @db.Text
  ExpiresAt         Int?
  TokenType         String?
  Scope             String?
  TokenId           String? @db.Text
  SessionState      String?

  User User @relation(fields: [UserId], references: [UserId], onDelete: Cascade)

  @@unique([Provider, ProviderAccountId])
}

model Session {
  SessionId    String   @id @default(cuid())
  SessionToken String   @unique
  UserId       Int
  Expires      DateTime
  User         User     @relation(fields: [UserId], references: [UserId], onDelete: Cascade)
}

model VerificationToken {
  Identifier String
  Token      String   @unique
  Expires    DateTime

  @@unique([Identifier, Token])
}
