// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement()) @db.Integer
  name          String
  email         String       @unique
  emailVerified DateTime?
  image         String?
  creationDate  DateTime     @default(now())
  updateDate    DateTime?    @updatedAt
  bookings      Booking[]
  avaliation    Avaliation[]
  accounts      Account[]
  sessions      Session[]
}

model BusinessUnit {
  id           Int          @id @default(autoincrement()) @db.Integer
  name         String
  email        String?      @unique
  adress       String?
  phone        String?
  imageUrl     String?
  avgRating    Decimal?     @db.Decimal(10, 2)
  creationDate DateTime     @default(now())
  updateDate   DateTime?    @updatedAt
  bookings     Booking[]
  service      Service[]
  coupon       Coupon[]
  avaliation   Avaliation[]
}

model Service {
  id             Int          @id @default(autoincrement()) @db.Integer
  name           String
  businessUnitId Int
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  coupons        Coupon[]
  categories     Category[]
  bookings       Booking[]
  imageUrl       String?
  description    String?
  price   Decimal?     @db.Decimal(10, 2)
  creationDate   DateTime     @default(now())
  updateDate     DateTime?    @updatedAt
}

model Category {
  id           Int       @id @default(autoincrement()) @db.Integer
  name         String
  creationDate DateTime  @default(now())
  updateDate   DateTime? @updatedAt
  service      Service   @relation(fields: [serviceId], references: [id])
  serviceId    Int
}

model Booking {
  id                    Int          @id @default(autoincrement()) @db.Integer
  userId                Int
  user                  User         @relation(fields: [userId], references: [id])
  businessUnitId        Int
  businessUnit          BusinessUnit @relation(fields: [businessUnitId], references: [id])
  serviceId             Int
  service               Service      @relation(fields: [serviceId], references: [id])
  initialValue          Decimal      @db.Decimal(10, 2)
  principalValue        Decimal      @db.Decimal(10, 2)
  wasConsolidatedCoupon Boolean
  couponId              Int?
  coupon                Coupon?      @relation(fields: [couponId], references: [id])
  creationDate          DateTime     @default(now())
  cpdateDate            DateTime?    @updatedAt
}

model Coupon {
  id             Int          @id @default(autoincrement()) @db.Integer
  name           String
  businessUnitId Int
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  serviceId      Int
  service        Service      @relation(fields: [serviceId], references: [id])
  creationDate   DateTime     @default(now())
  updateDate     DateTime?    @updatedAt
  booking        Booking[]
}

model Avaliation {
  avaliationId   Int          @id @default(autoincrement()) @db.Integer
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  businessUnitId Int
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  message        String
  rating         Decimal      @db.Decimal(10, 2)
  creationDate   DateTime     @default(now())
  updateDate     DateTime?    @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
